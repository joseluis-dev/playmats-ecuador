---
import { AddToCartButton } from "@/components/AddToCartButton.tsx";
import Badge from "@/components/Badge.astro";
import Card from "@/components/Card.astro";
import Layout from "@/layouts/Layout.astro";
import { api } from "@/services/api.ts";
import type { Product, Category, Attribute, ResourceProduct, Resource } from "@/types";
import { BoxIcon } from "lucide-react";

// Fetch products from the API
const fetchData = async (): Promise<Product[]> => {
    const res = await api.get<Product[]>('products');
    return res;
}

let PRODUCTS: Product[] = [];
let error: string | null = null;

try{
    PRODUCTS = await fetchData();
} catch (error) {
    console.error('Error fetching products:', error);
    PRODUCTS = [];
    error = "Error al cargar los productos. Por favor, intenta de nuevo m치s tarde.";
}

---

<Layout title="Playmats EC - Cat치logo">
    <section
        class="
            w-full max-w-screen-xl mx-auto
            p-8 md:p-12
        "
    >
        {PRODUCTS.length > 0 ? (
            <div class="
                grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4
                auto-rows-[25rem] gap-6
            ">
                {
                    PRODUCTS.map((product) => {
                        // Define additional interface for the API response structure
                        type ApiProduct = Product & {
                            productResources?: {
                                resource: Resource;
                                isBanner: boolean;
                            }[];
                        };
                        
                        const apiProduct = product as ApiProduct;

                        // Find banner image from resourceProducts or use first image if available
                        const bannerResource = product.resourceProducts?.find((rp: ResourceProduct) => rp.isBanner)?.resource || 
                                        product.resourceProducts?.[0]?.resource ||
                                        apiProduct.productResources?.find(pr => pr.isBanner)?.resource || 
                                        apiProduct.productResources?.[0]?.resource;
                        
                        const imageUrl = bannerResource?.url || '';
                        
                        return (
                            <a href={`/playmats/${product.id}`} class="
                                rounded-xl
                                group
                            ">
                                <Card 
                                    class="text-[var(--color-text)]"
                                    id={product.id}
                                    title={product.name}
                                    subtitle="Etiquetas"
                                    price={product.price}
                                >
                                    <div 
                                        slot="image"
                                        transition:name={`img-${product.id}`}
                                        class="
                                            absolute top-0 left-0 bottom-0
                                            h-full w-full
                                            group-hover:scale-110
                                            transition-scale duration-1000 ease-in-out
                                            opacity-90 -z-10
                                            bg-center bg-cover bg-no-repeat bg-blend-luminosity
                                        "
                                        style={`background-image: url(${imageUrl});`}
                                    />
                                    <ul slot="content" class="w-full flex flex-wrap gap-2 text-sm">
                                        {product.categories?.map((category: Category) => (
                                            <Badge color={category.color} label={category.name} type="outline" />
                                        ))}
                                        {
                                            product.attributes?.map((attribute: Attribute) => (
                                            <Badge color={attribute.color} label={attribute.name} type="outline" />
                                        ))}
                                    </ul>
                                    <AddToCartButton
                                        client:visible
                                        className={`
                                            flex items-center justify-center gap-2
                                            absolute top-0 right-0 p-4 ring-1 ring-black/20 dark:ring-white/20
                                            rounded-rt-lg rounded-bl-lg bg-[var(--color-primary)]/90 hover:bg-[var(--color-primary)] transition-colors duration-300
                                        `}
                                        label="A침adir"
                                        product={product}
                                        slot="footer"
                                    />
                                </Card>
                            </a>
                        );
                    })
                }
            </div>
        ) : (
            <div class="
                w-full 
                min-h-[50vh]
                flex flex-col items-center justify-center
                p-8 
                rounded-xl
                bg-[var(--color-bg)]
                border border-[var(--color-border)]
                shadow-lg
            ">
                <div class="flex flex-col text-center items-center gap-4">
                    <BoxIcon width={100} height={100} />
                    <h2 class="text-3xl font-bold text-[var(--color-text)]">No hay productos disponibles</h2>
                    <p class="text-lg text-[var(--color-text-muted)]">
                        {error || "No se encontraron productos en el cat치logo en este momento."}
                    </p>
                    <a 
                        href="/" 
                        class="
                            inline-flex items-center justify-center gap-2
                            px-6 py-3 
                            hover:bg-[var(--color-primary-dark)]
                            text-white 
                            rounded-lg 
                            transition-colors duration-300
                            font-medium
                        "
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                        </svg>
                        Volver al inicio
                    </a>
                </div>
            </div>
        )}
    </section>
</Layout>