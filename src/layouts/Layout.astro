---
import { ClientRouter } from 'astro:transitions'
import '@/styles/global.css'
import Header from '@/components/Header.astro'
import Footer from '@/components/Footer.astro'
import { Chatbot } from '@/components/Chatbot'
import { Toaster } from 'sonner'

const { title } = Astro.props
---
<!doctype html>
<html lang="es" class="">
	<head>
		<!-- Preload critical fonts -->
		<link rel="preload" as="font" href="/fonts/batmfa__.ttf" type="font/ttf" crossorigin>
		<link rel="preload" as="font" href="/fonts/batmfo__.ttf" type="font/ttf" crossorigin>
		<script is:inline>
			if (!window.__themeInit) {
				window.__themeInit = true;

				const getThemePreference = () => {
					try {
						const ls = localStorage.getItem('theme');
						if (ls === 'dark' || ls === 'light') return ls;
					} catch {}
					return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
				};

				const applyTheme = (doc = document) => {
					const mode = getThemePreference();
					const root = doc.documentElement;
					if (mode === 'dark') {
						root.classList.add('dark');
						root.style.colorScheme = 'dark';
					} else {
						root.classList.remove('dark');
						root.style.colorScheme = 'light';
					}
				};

				// Initial apply
				applyTheme(document);

				// Keep localStorage and color-scheme synced when user toggles the class
				try {
					const observer = new MutationObserver(() => {
						const isDarkNow = document.documentElement.classList.contains('dark');
						try { localStorage.setItem('theme', isDarkNow ? 'dark' : 'light'); } catch {}
						document.documentElement.style.colorScheme = isDarkNow ? 'dark' : 'light';
					});
					observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
					window.__themeObserver = observer;
				} catch {}

				// Ensure theme persists through ClientRouter swaps
				document.addEventListener('astro:before-swap', (event) => {
					try { applyTheme(event.newDocument); } catch {}
				});
				document.addEventListener('astro:after-swap', () => {
					applyTheme(document);
				});
			}
		</script>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/images/Playmats-EC-Logo.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<ClientRouter />
		<style is:inline>
		#nav-progress{position:fixed;top:0;left:0;height:3px;width:0;background:var(--color-primary);z-index:9999;transition:width .35s ease}
		body.nav-loading #nav-progress{width:70%}
		body.nav-loaded #nav-progress{width:100%;transition:width .2s ease}
		</style>
		<script is:inline>
		// Prefetch + navigation progress (lightweight)
		if(!window.__navEnhance){
		  window.__navEnhance = true;
		  const prefetched = new Set();
		  const prefetch = (href) => {
		    try {
		      if(!href.startsWith(location.origin)) return;
		      if(prefetched.has(href)) return;
		      prefetched.add(href);
		      fetch(href, { method: 'GET', priority: 'low' }).catch(()=>{});
		    } catch {}
		  };
		  const setupLinks = () => {
		    document.querySelectorAll('a[data-prefetch]').forEach(a => {
		      if(a.__pf) return; a.__pf = true;
		      a.addEventListener('pointerenter', () => prefetch(a.href), { passive:true });
		      // Intersection based prefetch
		      const io = new IntersectionObserver(es => {
		        es.forEach(e => { if(e.isIntersecting){ prefetch(a.href); io.disconnect(); } });
		      }, { rootMargin: '200px' });
		      io.observe(a);
		    });
		  };
		  document.addEventListener('astro:page-load', setupLinks);
		  // Navigation progress
		  const start = () => { document.body.classList.add('nav-loading'); document.body.classList.remove('nav-loaded'); };
		  const end = () => { requestAnimationFrame(()=> { document.body.classList.remove('nav-loading'); document.body.classList.add('nav-loaded'); setTimeout(()=>{ const bar=document.getElementById('nav-progress'); if(bar) bar.style.width='0'; document.body.classList.remove('nav-loaded'); },450); }); };
		  addEventListener('astro:before-navigate', start);
		  addEventListener('astro:after-swap', end);
		  document.addEventListener('astro:page-load', end);
		}
		</script>
	</head>
	<body>
		<div id="nav-progress"></div>
		<header class="sticky top-0 z-50 bg-[var(--color-background)]">
			<Header />
		</header>
		<main class="relative flex flex-col items-center">
			<slot />
		</main>
		<footer>
			<Footer />
		</footer>
		<Chatbot client:idle />
		<Toaster richColors closeButton position="top-right" client:idle />
	</body>
</html>
