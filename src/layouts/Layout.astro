---
import { ClientRouter } from 'astro:transitions'
import '@/styles/global.css'
import Header from '@/components/Header.astro'
import Footer from '@/components/Footer.astro'
import { Chatbot } from '@/components/Chatbot'
import { Toaster } from 'sonner'

const { title } = Astro.props
---
<!doctype html>
<html lang="es" class="">
	<head>
		<script is:inline>
			if (!window.__themeInit) {
				window.__themeInit = true;

				const getThemePreference = () => {
					try {
						const ls = localStorage.getItem('theme');
						if (ls === 'dark' || ls === 'light') return ls;
					} catch {}
					return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
				};

				const applyTheme = (doc = document) => {
					const mode = getThemePreference();
					const root = doc.documentElement;
					if (mode === 'dark') {
						root.classList.add('dark');
						root.style.colorScheme = 'dark';
					} else {
						root.classList.remove('dark');
						root.style.colorScheme = 'light';
					}
				};

				// Initial apply
				applyTheme(document);

				// Keep localStorage and color-scheme synced when user toggles the class
				try {
					const observer = new MutationObserver(() => {
						const isDarkNow = document.documentElement.classList.contains('dark');
						try { localStorage.setItem('theme', isDarkNow ? 'dark' : 'light'); } catch {}
						document.documentElement.style.colorScheme = isDarkNow ? 'dark' : 'light';
					});
					observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
					window.__themeObserver = observer;
				} catch {}

				// Ensure theme persists through ClientRouter swaps
				document.addEventListener('astro:before-swap', (event) => {
					try { applyTheme(event.newDocument); } catch {}
				});
				document.addEventListener('astro:after-swap', () => {
					applyTheme(document);
				});
			}
		</script>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/images/Playmats-EC-Logo.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<ClientRouter />
	</head>
	<body>
		<header class="sticky top-0 z-50 bg-[var(--color-background)]">
			<Header />
		</header>
		<main class="relative flex flex-col items-center">
			<slot />
		</main>
		<footer>
			<Footer />
		</footer>
		<Chatbot client:only />
		<Toaster richColors closeButton position="top-right" client:only />
	</body>
</html>
