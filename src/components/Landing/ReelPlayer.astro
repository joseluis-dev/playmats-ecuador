---
import PlayIcon from '../icons/PlayIcon.astro'

interface Props {
  videoId: string
  image: string
  title: string
  source: string
}

const { videoId, image, title, source } = Astro.props
---

<reel-video
  class="rounded-[16px] h-[570px] w-[250px] snap-center bg-black relative shrink-0 cursor-pointer bg-center bg-no-repeat bg-[length:300%] hover:bg-[length:310%] transition-all duration-1000 ease-in-out"
  videoid={videoId}
  image={image}
  data-title={title}
  source={source}
  data-track="play_video"
  aria-label="Reproducir video"
  role="button"
  tabindex="0"
>
  <div
    class="p-4 pl-[18px] bg-[var(--color-surface)] rounded-full absolute bottom-6 right-6 hover:scale-110 transition-transform duration-300 ease-in-out"
    id=`Id${videoId}`
    title={title}
  >
    <PlayIcon name="play" class="text-primary" />
  </div>
</reel-video>

<script>
  const reelVideos = document.querySelectorAll("reel-video") as NodeListOf<ReelVideo>
  class ReelVideo extends HTMLElement {
    videoId?: string
    source?: string

    connectedCallback() {
      const image = this.getAttribute("image")
      this.videoId = this.getAttribute("videoId")!
      this.source = this.getAttribute("source")!

      this.style.backgroundImage = `url(${image})`

      this.addEventListener("click", this.activateVideo)
      this.addEventListener("keydown", this.handleKeyPress)
    }

    activateVideo() {
      const pauseVideos = () => {
        reelVideos.forEach((reel) => {
          if (reel.querySelector("video") && reel !== this) {
            reel.querySelector("video")?.pause()
          }
        })
      }
      this.style.backgroundImage = "unset"

      this.querySelector(`#Id${this.videoId}`)?.remove()

      const videoEl = this.createPlayer()
      this.append(videoEl)
      videoEl.focus()

      // this.unMutePlayerByDefault()
      this.removeEventListener("click", this.activateVideo)

      videoEl.addEventListener('play', pauseVideos)
    }

    handleKeyPress(event: KeyboardEvent) {
      if (event.code === "Enter" || event.code === "Space") {
        this.activateVideo()
      }
    }

    createPlayer() {
      const videoEl = document.createElement("video")
      videoEl.setAttribute("autoplay", "true")
      videoEl.setAttribute("playsinline", "true")
      videoEl.setAttribute("preload", "auto")
      videoEl.setAttribute("controls", "true")
      videoEl.setAttribute("controlsList", "nodownload")
      videoEl.setAttribute("class", "w-full h-full object-cover rounded-[16px]")
      videoEl.setAttribute("src", this.source!)

      return videoEl
    }

    // unMutePlayerByDefault() {
    //   const videoEl = this.querySelector("video")
    //   if (videoEl) {
    //     videoEl.muted = false
    //   }
    // }
  }

  customElements.define("reel-video", ReelVideo)
</script>