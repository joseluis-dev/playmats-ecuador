---
import { getDarkModeVariant } from "@/lib/dark_colors";
import clsx from "clsx";

interface BadgeProps {
  color:
    | "gray"
    | "red"
    | "yellow"
    | "green"
    | "blue"
    | "indigo"
    | "purple"
    | "pink"
    | `#${string}`; // Permitir colores hex arbitrarios
  label: string;
  type: "ghost" | "outline";
}

const { color, label, type = "ghost" } = Astro.props as BadgeProps;

const isHexColor = (color: string) => /^#[0-9A-F]{6}$/i.test(color);

// Clases para colores de Tailwind conocidos
const ghostColor700 = `${color}-700`;
const ghostColor500 = `${color}-500`;
const ghostColor400 = `${color}-400`;

const ghostClasses = clsx(
  `bg-${ghostColor700}/10`,
  `text-${ghostColor700}`,
  `ring-${ghostColor700}/10`,
  `dark:bg-${ghostColor400}/30`,
  `dark:text-${ghostColor400}`,
  `dark:ring-${ghostColor400}/30`
);

const outlineClasses = clsx(
  `bg-${ghostColor500}`,
  `dark:bg-${ghostColor400}`
);

// Para colores hex arbitrarios, se usarÃ¡n estilos inline
const getGhostStyle = (hex: string) => ({
  backgroundColor: `${hex}1A`, // 10% opacity
  color: hex,
  borderColor: `${hex}1A`,
});

const getGhostDarkStyle = (hex: string) => ({
  backgroundColor: `${getDarkModeVariant(hex)}4D`, // 30% opacity
  color: getDarkModeVariant(hex),
  borderColor: `${getDarkModeVariant(hex)}4D`,
});

const getOutlineStyle = (hex: string) => ({
  backgroundColor: hex,
});

const isHex = isHexColor(color);
---
{type === "ghost" ? (
  <span
    class={`inline-flex items-center rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset ${
      isHex ? "" : ghostClasses
    }`}
    style={isHex ? getGhostStyle(color) : undefined}
    data-dark-style={isHex ? JSON.stringify(getGhostDarkStyle(color)) : undefined}
  >
    {label}
  </span>
) : (
  <span
    class="inline-flex items-center rounded-md px-2 py-1 text-xs font-medium ring-1 ring-[var(--color-text)] gap-2"
  >
    <span
      class={`${isHex ? "" : outlineClasses} size-2 rounded-full`}
      style={isHex ? getOutlineStyle(color) : undefined}
      data-dark-style={isHex ? JSON.stringify(getOutlineStyle(color)) : undefined}
    ></span>
    {label}
  </span>
)}

<script>
document.querySelectorAll('[data-dark-style]').forEach((el) => {
  const darkMode = document.documentElement.classList.contains('dark');
  const styles = JSON.parse(el.getAttribute('data-dark-style')!);
  if (darkMode) {
    Object.assign((el as HTMLElement).style, styles);
  }
});

</script>